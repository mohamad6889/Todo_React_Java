{"version":3,"sources":["components/todo/AuthenticationService.js","components/todo/AuthenticationRoute.jsx","components/todo/LoginComponent.jsx","components/todo/ListToDosComponent.jsx","components/todo/HeaderComponent.jsx","components/todo/ToDoApp.jsx","App.js","serviceWorker.js","index.js"],"names":["username","password","console","log","sessionStorage","setItem","removeItem","getItem","AuthenticationRoute","AuthenticationService","isUserLoggedIn","this","props","to","Component","LoginComponent","state","loginFailed","loginSuccssed","handleNameChange","bind","loginClicked","event","setState","target","name","value","registerSuccessfulLogin","history","push","className","type","onChange","onClick","ListToDosComponent","todos","id","content","done","targetDate","Date","map","todo","key","toString","HeaderComponent","isLoggedIn","logout","ToDoApp","path","exact","component","HomeComponent","RegisterComponent","WelcomeComponent","LogoutComponent","errorComponent","match","params","FooterComponent","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6811f7c8.chunk.js","sourcesContent":["class AuthenticationService {\r\n\r\n\r\n    registerSuccessfulLogin(username, password) {\r\n        console.log('Authentication successful');\r\n        sessionStorage.setItem('authenticatedUser', username);\r\n    }\r\n\r\n    logout() {\r\n        sessionStorage.removeItem('authenticatedUser')\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem('authenticatedUser')\r\n        if(user===null) return false;\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()","import React, { Component } from \"react\";\r\nimport AuthenticationService from \"./AuthenticationService\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nclass AuthenticationRoute extends Component {\r\n    render() {\r\n        if(AuthenticationService.isUserLoggedIn()) {\r\n            return <Route {...this.props} />\r\n        } else {\r\n            return <Redirect to=\"/login\" />\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default AuthenticationRoute","import React, { Component } from 'react';\r\nimport './ToDoApp.css'\r\nimport AuthenticationService from './AuthenticationService'\r\n\r\n\r\n\r\nclass LoginComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            username : 'mohammad',\r\n            password : '',\r\n            loginFailed : false,\r\n            loginSuccssed : false\r\n        }\r\n\r\n        this.handleNameChange = this.handleNameChange.bind(this)\r\n        this.loginClicked = this.loginClicked.bind(this)\r\n    }\r\n\r\n    handleNameChange(event) {\r\n        this.setState({\r\n            [event.target.name] : event.target.value\r\n        })\r\n    }\r\n\r\n    loginClicked() {\r\n        if((this.state.username === \"user\" || this.state.username===\"mohammad\") && this.state.password === \"pass\") {\r\n            AuthenticationService.registerSuccessfulLogin(this.state.username, this.state.password)\r\n            this.props.history.push(`/welcome/${this.state.username}`)\r\n            \r\n\r\n        }\r\n        else {\r\n            this.setState({loginSuccssed:false})\r\n            this.setState({loginFailed:true})\r\n        }\r\n    }\r\n\r\n    \r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                {this.state.loginFailed && <div className=\"alert alert-warning\">Invalid Credentials</div>}\r\n                <div className=\"username\">\r\n                    <label className=\"usernameLabel\">Username  : </label>\r\n                    <input type=\"text\" value={this.state.username} onChange={this.handleNameChange} className=\"usernameInput\" name=\"username\"></input>\r\n                </div>\r\n                <div className=\"password\">\r\n                    <label className=\"passwordLabel\">Password : </label>\r\n                    <input type=\"password\" value={this.state.password} onChange={this.handleNameChange} className=\"passwordInput\" name=\"password\"></input>\r\n                </div>\r\n                {this.state.loginFailed && <div><h6>Invalid Credential</h6></div>}\r\n                <div className=\"loginBtn\">\r\n                <button type=\"submit\" className=\"a\" onClick={this.loginClicked}>LOGIN</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default LoginComponent\r\n","import React, { Component } from 'react';\r\nimport './ToDoApp.css'\r\n\r\n\r\n\r\nclass ListToDosComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            todos : [\r\n                {id:1, content:\"get a job\", done:false, targetDate: new Date()},\r\n                {id:2, content:\"get a gf\", done:false, targetDate: new Date()},\r\n                {id:3, content:\"fuck her in the ass\", done:false, targetDate: new Date()}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <h2>Todos List</h2>\r\n\r\n                <table className=\"jumbotron bg-dark container\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>id</th>\r\n                            <th>Content</th>\r\n                            <th>Is Done?</th>\r\n                            <th>Target Date</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            this.state.todos.map (\r\n                                todo =>\r\n                                <tr key={todo.id}>\r\n                                    <td>{todo.id}</td>\r\n                                    <td>{todo.content}</td>\r\n                                    <td><input type=\"checkbox\"></input></td>\r\n                                    <td>{todo.targetDate.toString()}</td>\r\n                                    <td><button className=\"editBtn\">Edit</button></td>\r\n                                    <td><span> </span></td>\r\n                                    <td><button className=\"delBtn\">Delete</button></td>\r\n                                </tr>\r\n                            )\r\n                        }\r\n                        \r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ListToDosComponent\r\n","import React, { Component } from 'react';\r\nimport './ToDoApp.css'\r\nimport {Link} from 'react-router-dom'\r\nimport AuthenticationService from './AuthenticationService.js'\r\n\r\n\r\n\r\nclass HeaderComponent extends Component {\r\n    \r\n    render() {\r\n        const isLoggedIn = AuthenticationService.isUserLoggedIn()\r\n        \r\n        return (\r\n            <>\r\n                <header>\r\n                    <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\r\n                        <div className=\"navbar-brand\"><Link to=\"/\">ToDo Apllication</Link></div>\r\n                        <ul className=\"navbar-nav\">\r\n                            {isLoggedIn && <li className=\"nav-link\"><Link className=\"nav-link\" to=\"/todos\">ToDos</Link></li>}\r\n                        </ul>\r\n                        <ul className=\"navbar-nav navbar-collapse justify-content-end\">\r\n                            {!isLoggedIn && <li className=\"nav-link\"><Link className=\"nav-link\" to=\"/register\">Register</Link></li>}\r\n                            {!isLoggedIn && <li className=\"nav-link\"><Link className=\"nav-link\" to=\"/login\">Login</Link></li>}\r\n                            {isLoggedIn && <li className=\"nav-link\"><Link className=\"nav-link\" to=\"/logout\" onClick={AuthenticationService.logout}>Logout</Link></li>}\r\n                        </ul>\r\n                    </nav>\r\n                </header>\r\n            </>\r\n        )\r\n    }\r\n  }\r\n\r\n\r\n  export default HeaderComponent\r\n","import React, { Component } from 'react';\r\nimport './ToDoApp.css'\r\nimport {BrowserRouter as Router, Route, Switch, Link} from 'react-router-dom'\r\nimport AuthenticationRoute from './AuthenticationRoute.jsx'\r\nimport LoginComponent from './LoginComponent.jsx'\r\nimport ListToDosComponent from './ListToDosComponent.jsx'\r\nimport HeaderComponent from './HeaderComponent'\r\n\r\nclass ToDoApp extends Component {\r\n    render() {\r\n        return(\r\n            <div className=\"ToDoApp\">\r\n                <Router>\r\n                    <>\r\n                    <HeaderComponent/>\r\n                        <Switch>\r\n                            <Route path=\"/\" exact component={HomeComponent} />\r\n                            <Route path=\"/register\" component={RegisterComponent} />\r\n                            <Route path=\"/login\" component={LoginComponent} />\r\n                            <AuthenticationRoute path=\"/welcome/:name\" component={WelcomeComponent} />\r\n                            <AuthenticationRoute path=\"/todos\" component={ListToDosComponent} />\r\n                            <AuthenticationRoute path=\"/logout\" component={LogoutComponent} />\r\n                            <Route component={errorComponent}></Route>\r\n                        </Switch> \r\n                        <FooterComponent/>\r\n                    </>\r\n                </Router>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass HomeComponent extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <Link to=\"/register\">Register</Link>\r\n                <Link to=\"/login\">Login</Link>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nclass RegisterComponent extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Register</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction errorComponent() {\r\n    return(\r\n        <div>\r\n            <h2>An error occurred!</h2>\r\n            <Link to=\"/\">Go to Home Page</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass WelcomeComponent extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"container\">WELCOM {this.props.match.params.name}</div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n  \r\n    class FooterComponent extends Component {\r\n    render() {\r\n        return (\r\n            <footer className=\"footer\">\r\n                <span className=\"text-muted\">All Rights Reserves @Mohammad Amani</span>\r\n            </footer>\r\n        )\r\n    }\r\n  }\r\n\r\n\r\n  class LogoutComponent extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h1>You are Logged Out</h1>\r\n                <div className=\"jumbotron bg-dark\">\r\n                Thanks for Using ToDo :)\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n  }\r\n  \r\n\r\n\r\n\r\n\r\n\r\nexport default ToDoApp","import React, { Component } from 'react';\nimport './App.css';\nimport './bootstrap.css'\nimport ToDoApp from './components/todo/ToDoApp'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ToDoApp></ToDoApp>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}